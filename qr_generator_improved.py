import segno
from PIL import Image
import os
import shutil
import tempfile

# URL para el c√≥digo QR
google_review_url = "https://search.google.com/local/writereview?placeid=ChIJe2prou8uQg0RgZENtpxAgqY"

# Funci√≥n para convertir JPEG a PNG con transparencia
def convert_jpeg_to_png(jpeg_path, output_png_path, dpi=300):
    """
    Convierte un archivo JPEG a PNG manteniendo la calidad para impresi√≥n.
    
    Args:
        jpeg_path: Ruta al archivo JPEG
        output_png_path: Ruta donde guardar el PNG
        dpi: Resoluci√≥n para impresi√≥n (dots per inch)
    """
    try:
        # Abrir la imagen JPEG
        img = Image.open(jpeg_path)
        
        # Configurar la resoluci√≥n para impresi√≥n
        img.info['dpi'] = (dpi, dpi)
        
        # Si queremos un fondo transparente, podemos crear una m√°scara
        # (Esto es opcional y depende de tu logo)
        """
        # Para hacer el fondo blanco transparente:
        img = img.convert("RGBA")
        datas = img.getdata()
        new_data = []
        for item in datas:
            # Si el pixel es casi blanco, hacerlo transparente
            if item[0] > 240 and item[1] > 240 and item[2] > 240:
                new_data.append((255, 255, 255, 0))  # Transparente
            else:
                new_data.append(item)  # Mantener el color original
        img.putdata(new_data)
        """
        
        # Guardar como PNG
        img.save(output_png_path, "PNG", dpi=(dpi, dpi))
        print(f"‚úÖ Imagen convertida y guardada como {output_png_path}")
        return True
    except Exception as e:
        print(f"‚ùå Error al convertir la imagen: {e}")
        return False

# Funci√≥n para crear un QR con logo
def create_qr_with_logo(url, logo_path, output_path, scale=10):
    """
    Crea un c√≥digo QR con un logo en el centro.
    
    Args:
        url: URL para codificar en el QR
        logo_path: Ruta al archivo del logo (PNG)
        output_path: Ruta donde guardar el QR final
        scale: Escala del QR (mayor = mejor resoluci√≥n)
    """
    try:
        # Crear el c√≥digo QR con alta correcci√≥n de errores
        qr = segno.make(url, error='h')
        
        # M√©todo alternativo compatible con todas las versiones de segno
        # Generar el QR b√°sico primero
        qr.save(output_path, scale=scale, border=4, light="white")
        
        # Luego a√±adir el logo manualmente con PIL
        qr_img = Image.open(output_path)
        logo_img = Image.open(logo_path)
        
        # Calcular posici√≥n y tama√±o para el logo
        qr_width, qr_height = qr_img.size
        logo_width, logo_height = logo_img.size
        
        # Redimensionar logo (20% del tama√±o del QR)
        logo_size = int(qr_width * 0.2)
        # Usar m√©todo compatible con todas las versiones de PIL
        # En PIL moderno se usan valores enteros en lugar de constantes
        logo_img = logo_img.resize((logo_size, logo_size), resample=1)  # 1 = alta calidad
        
        # Calcular posici√≥n para centrar el logo
        position = ((qr_width - logo_size) // 2, (qr_height - logo_size) // 2)
        
        # Crear una nueva imagen con fondo blanco
        final_img = Image.new("RGBA", qr_img.size, "white")
        
        # Pegar el QR
        if qr_img.mode == "RGBA":
            final_img.paste(qr_img, (0, 0), qr_img)
        else:
            final_img.paste(qr_img, (0, 0))
        
        # Pegar el logo
        if logo_img.mode == "RGBA":
            final_img.paste(logo_img, position, logo_img)
        else:
            final_img.paste(logo_img, position)
        
        # Guardar imagen final
        final_img.save(output_path, "PNG")
        
        print(f"‚úÖ QR generado como: {output_path}")
        return True
    except Exception as e:
        print(f"‚ùå Error al generar el QR: {e}")
        return False

# Ruta al logo JPEG
logo_jpeg_path = "logo.jpeg"
logo_png_path = "logo_for_qr.png"

# Convertir el logo de JPEG a PNG
if os.path.exists(logo_jpeg_path):
    convert_jpeg_to_png(logo_jpeg_path, logo_png_path)
else:
    print(f"‚ùå No se encontr√≥ el archivo {logo_jpeg_path}")
    exit()

# Crear QRs en diferentes formatos para diferentes usos
# QR para impresi√≥n (alta resoluci√≥n)
create_qr_with_logo(
    url=google_review_url,
    logo_path=logo_png_path,
    output_path="qr_print_ready.png",
    scale=20  # Alta resoluci√≥n para impresi√≥n
)

# QR para uso digital
create_qr_with_logo(
    url=google_review_url,
    logo_path=logo_png_path,
    output_path="qr_digital.png",
    scale=10  # Resoluci√≥n est√°ndar para web
)

# QR en formato SVG (para edici√≥n adicional)
svg_output = "qr_editable.svg"
qr = segno.make(google_review_url, error='h')
qr.save(svg_output, scale=10, border=4)
print(f"‚úÖ QR b√°sico en SVG generado como: {svg_output} (puedes a√±adir el logo manualmente)")

print("\nüñ®Ô∏è El archivo qr_print_ready.png est√° optimizado para impresi√≥n")
print("üåê El archivo qr_digital.png est√° optimizado para uso digital")
print("‚úèÔ∏è El archivo qr_editable.svg puede editarse con software como Illustrator o Inkscape")
